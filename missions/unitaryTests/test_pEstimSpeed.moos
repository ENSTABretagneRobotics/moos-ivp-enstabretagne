// Estim the speed from u1,u2,u3 with guessed matrices,
// from the simulator

// MOOS file

ServerHost = localhost
ServerPort = 9000

Community  = AUV

//------------------------------------------
// Antler configuration  block

ProcessConfig = ANTLER
{
  MSBetweenLaunches = 200
  Run = MOOSDB        @ NewConsole = false
  Run = uMS           @ NewConsole = false
  Run = pEstimSpeed   @ NewConsole = true
  Run = uJoystick     @ NewConsole = false
  Run = pMixThrusters @ NewConsole = true
  Run = uTimerScript  @ NewConsole = false ~timerScriptMissionStart
  Run = pEchoVar      @ NewConsole = false
}

//------------------------------------------
ProcessConfig = timerScriptMissionStart
{
  event = var = RESET, val=1, time=15
}

//------------------------------------------------
// pEstimSpeed config block

ProcessConfig = pEstimSpeed
{
   AppTick   = 10
   CommsTick = 10

   // The coeff matrix maps forces (Newton) to inputs ([-1,1], adimensional)
   // In this application, we will compute the inverse of this matrix,
   // so that from inputs we get forces, and can apply Newton's law of motion
   COEFF_MATRIX = 0.1,-0.1,0,0.1,0.1,0,0,0,0.1

   // The damping matrix maps square of speeds as inputs, and return a force.
   // In an underwater environment, the damping is not linear with respect
   // to speed.
   // Once we have the damping forces and the input forces, we can apply Newton's laws of motion
   DAMPING_MATRIX = 4,0,0,0,10,0,0,0,4//0,0,0,0,0,0,0,0,0//

   // Initial speed. In principle, we should aim for a null speed at
   // startup
   V0 = 0,0,0

   // Name to receive the yaw
   YAW_REGISTRATION_NAME = IMU_YAW
   
   U1_SUBSCRIPTION_NAME = DESIRED_U1
   U2_SUBSCRIPTION_NAME = DESIRED_U2
   U3_SUBSCRIPTION_NAME = DESIRED_U3
   RESET_SUBSCRIPTION_NAME = RESET
   GPS_E_SUBSCRIPTION_NAME = GPS_E
   GPS_N_SUBSCRIPTION_NAME = GPS_N
   KELLER_DEPTH_SUBSCRIPTION_NAME = KELLER_DEPTH

   // Names of the publications
   POS_DEAD_RECKONING_E_PUBLICATION_NAME = POS_DEAD_RECKONING_E
   POS_DEAD_RECKONING_N_PUBLICATION_NAME = POS_DEAD_RECKONING_N
   POS_DEAD_RECKONING_U_PUBLICATION_NAME = POS_DEAD_RECKONING_U
   SPEED_LOCAL_DEAD_RECKONING_PUBLICATION_NAME = SPEED_LOCAL_DEAD_RECKONING
   SPEED_GLOBAL_DEAD_RECKONING_PUBLICATION_NAME = SPEED_GLOBAL_DEAD_RECKONING
}

ProcessConfig = uJoystick
{
   AppTick   = 10
   CommsTick = 10
   
   DEVICE_NAME = /dev/input/js0

   INCREMENT = false
   SCALE = 1
   
   AXIS = 0
   SCALE_RATIO = 1
   MOOS_DEST_VAR = DESIRED_SLIDE2
   
   AXIS = 1
   SCALE_RATIO = 1
   MOOS_DEST_VAR = DESIRED_FX
   
   AXIS = 2
   SCALE_RATIO = 1
   MOOS_DEST_VAR = DESIRED_RZ
   
   AXIS = 3
   SCALE_RATIO = 1
   MOOS_DEST_VAR = DESIRED_FZ
   
   BUTTON = 1
   SCALE_RATIO = 1
   MOOS_DEST_VAR = PUSHED_BUTTON_1
   
   BUTTON = 2
   SCALE_RATIO = 1
   MOOS_DEST_VAR = PUSHED_BUTTON_2
}

ProcessConfig = pMixThrusters
{
  AppTick   = 10
  CommsTick = 10

  FX_SUBSCRIPTION_NAME = DESIRED_FX
  RZ_SUBSCRIPTION_NAME = DESIRED_RZ
  FZ_SUBSCRIPTION_NAME = DESIRED_FZ

  U1_PUBLICATION_NAME = DESIRED_U1
  U2_PUBLICATION_NAME = DESIRED_U2
  U3_PUBLICATION_NAME = DESIRED_U3

  COEFF_MATRIX=1,-1,0,1,1,0,0,0,1
}


// We remap for the simulator to get the estimated postition
ProcessConfig = pEchoVar
{
  AppTick   = 10
  CommsTick = 10

  Echo      = POS_DEAD_RECKONING_E  ->  pX
  Echo      = POS_DEAD_RECKONING_N  ->  pY
  Echo      = GPS_ALTITUDE  ->  pZ
  Echo      = IMU_YAW               ->  pYaw
}